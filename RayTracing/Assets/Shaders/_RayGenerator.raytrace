#include "UnityShaderVariables.cginc"
#include "_Utils.hlsl"
#include "_GlobalResources.hlsl"
// 自定义的payload结构体，用于跨光追阶段传输数据
#include "_RayPayload.hlsl"

// 最大递归深度，避免性能开销（DXR默认支持递归）
#pragma max_recursion_depth 1

// Input
float g_Zoom;
float g_AspectRatio;
uint g_ConvergenceStep;         // 当前帧的累积步数
uint g_FrameIndex;              // 当前帧索引（用于随机数生成）
TextureCube<float4> g_EnvTex;   // 环境贴图，用于在 Miss 时返回背景光照
SamplerState sampler_g_EnvTex;

// Output
RWTexture2D<float4> g_Radiance; // 输出图像缓冲区，写入最终颜色

// 主光追逻辑
[shader("raygeneration")]
void MainRayGenShader(){
// 【计算像素中心】
    // - DispatchRaysIndex():当前像素索引（类似thread id）
    // - DispatchRaysDimensions()：整个图像的尺寸
    // 当前像素坐标（DX的Y轴从上往下，渲染要从下往上）
    uint2 launchIndex = uint2(DispatchRaysIndex().x, DispatchRaysDimensions().y - DispatchRaysIndex().y - 1);
    // 图像总尺寸
    uint2 launchDim = DispatchRaysDimensions().xy;
    // 当前像素中心（否则像素会对准左下角）
    float2 frameCoord = launchIndex + float2(0.5, 0.5);

//【随机抖动】用于抗锯齿+多帧采样
    // 随机数种子
    uint rngState = uint(uint(launchIndex.x) * uint(1973) + uint(launchIndex.y) * uint(9277) + uint(g_ConvergenceStep + g_FrameIndex) * uint(26699)) | uint(1);
    // Jitter抖动
    float2 jitter = float2(RandomFloat01(rngState), RandomFloat01(rngState)) - float2(0.5, 0.5);

//【计算射线方向】
    // 将当前像素变换为NDC坐标
    float2 ndcCoord = (frameCoord + jitter) / float2(launchDim.x - 1, launchDim.y - 1);
    ndcCoord = ndcCoord * 2.0f - float2(1,1);  //（-1,1）
    ndcCoord = ndcCoord * g_Zoom;
    // View空间的视角方向
    float3 viewDirection = normalize(float3(ndcCoord.x * g_AspectRatio, ndcCoord.y, 1));
    // 世界空间的视角方向（射线方向）
    float3 rayDirection = mul((float3x3)unity_CameraToWorld, viewDirection);

//【初始化 Ray 和 Payload】
    // 初始化 主射线ray
    RayDesc ray;
    ray.Origin = _WorldSpaceCameraPos;
    ray.Direction = rayDirection;
    ray.TMin = 0;
    ray.TMax = K_T_MAX; // 射线最大距离，K_T_MAX是一个大数

    // 初始化 射线负载数据
    RayPayload payload;
    payload.albedo = float3(1,1,1);                 // 材质反射率
    payload.emission = float3(0,0,0);               // 材质自发光
    payload.rngState = rngState;                    // 随机数种子
    payload.bounceIndexOpaque = 0;                  // 不透明材质反弹次数
    payload.bounceIndexTransparent = 0;             // 透明材质反弹次数
    payload.bounceRayOrigin = float3(0,0,0);        // 当前路径的下一个反弹点信息
    payload.bounceRayDirection = float3(0,0,0);
    payload.k = 1;                                  // BRDF权重系数    

//【路径追踪】
    uint missShaderIndex = 0;
    // 死循环保护
    uint safeNet = 0;
    // 初始化累积颜色和能量
    float3 radiance = float3(0,0,0);
    float3 throughput = float3(1,1,1);

    do{
        // TrancRay() 一旦命中物体，就会调用ClosestHit Shader，修改payload
        TraceRay(g_AccelStruct, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);

        // 累加发光贡献
        radiance += payload.emission * throughput;     

        // 更新能量：能量衰减
        throughput *= payload.albedo / max(0.001, payload.k);

        // 俄罗斯轮盘赌：提前终止路径
        float pathStopProbaility = 1;
        #define ENABLE_RUSSIAN_ROULETTE 1

        #ifdef ENABLE_RUSSIAN_ROULETTE
            //  Russian Roulette ：用于减少路径追踪中采样的噪声的方法
            // - 随机选择一个值，如果大于某个阈值，则继续追踪，否则终止追踪
            // - 阈值越小，噪声越小，但性能越差
            // - 阈值越大，噪声越大，但性能越好
            pathStopProbaility = max(throughput.r, max(throughput.g, throughput.b));
            if(pathStopProbaility < RandomFloat01(payload.rngState))
                break;
        #endif
            // 修正能量
            throughput *= 1 / pathStopProbaility;

            ray.Origin = payload.bounceRayOrigin;
            ray.Direction = payload.bounceRayDirection;
    }// 如果当前路径bounce次数未超过上限就继续循环
    while ((payload.bounceIndexOpaque <= g_BounceCountOpaque) && (payload.bounceIndexTransparent <= g_BounceCountTransparent) && (++safeNet < 1000));

    // 读取前一帧该像素颜色
    float3 prevRadiance = g_Radiance[launchIndex].xyz;

    // 图像帧间融合：滑动平均的递推形式
    // - prevRadiance 前一帧这个像素累积的亮度值
    // - radiance 当前帧 路径追踪 计算出的亮度
    // - g_ConvergenceStep 当前累积帧编号
    float3 result = lerp(prevRadiance, radiance, 1.0f / float(g_ConvergenceStep + 1));

    // 写入输出图像缓存
    g_Radiance[launchIndex] = float4(result, 1);
}

[shader("miss")]
void MissShader(inout RayPayload payload : SV_RayPayload){
    payload.emission = g_EnvTex.SampleLevel(sampler_g_EnvTex, WorldRayDirection(), 0).xyz;
    payload.bounceIndexOpaque = -1;
}  

